getwd()
setwd("~/FragPipeToTPPR")
tpprTotpmap(dummyconfigpath, dummyhumandatabse)
getwd()
setwd("~/FragPipeToTPPR")
tpprTotpmap(dummyconfigpath, dummyhumandatabse)
library(FragPipeToTPPR)
getwd()
tmtitotppr(dummyFragPipepath,dummyexplabels)
tpprNormOneDTPP(dummyconfigpath,dummyFragPipepath)
getwd()
setwd("~/FragPipeToTPPR")
tmtitotppr(dummyFragPipepath,dummyexplabels)
tpprTotpmap(dummyconfigpath, dummyhumandatabse)
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
load("~/FragPipeToTPPR/data/dummyconfigpath.rda")
load("~/FragPipeToTPPR/data/dummyexplabels.rda")
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, overwrite = T)
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
library(FragPipeToTPPR)
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
dummyFragPipepath <- "dummyFragPipeFolder/"
dummyhumandatabse <- "dummyFragPipeFolder/2023-07-12-UP000005640_dummy.fas"
dummyexplabels <- c("Treatment", "Vehicle")
dummyconfigpath <- "dummyFragPipeFolder/1DTPP-TPPR/TPP-TR_config.csv"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, overwrite = T)
library(FragPipeToTPPR)
load("~/FragPipeToTPPR/data/dummyconfigpath.rda")
load("~/FragPipeToTPPR/data/dummyexplabels.rda")
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
tmtitotppr(dummyFragPipepath,dummyexplabels)
tpprNormOneDTPP(dummyconfigpath,dummyFragPipepath)
getwd()
setwd("~/FragPipeToTPPR")
tpprTotpmap(dummyconfigpath, dummyhumandatabse)
tpprTotpmap(dummyconfigpath, dummyhumandatabse)
renv::snapshot()
setwd("~/FragPipeToTPPR")
library(FragPipeToTPPR)
tmtitotppr(FragPipepath,explabels)
getwd()
FragPipepath <- "FragPipeFolder/"
explabels <- c("Vehicle, Treatment")
print(FragPipepath)
tmtitotppr(FragPipepath,explabels)
library(FragPipeToTPPR)
load("~/FragPipeToTPPR/data/dummyconfigpath.rda")
load("~/FragPipeToTPPR/data/dummyexplabels.rda")
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
load("~/FragPipeToTPPR/data/dummyhumandatabse.rda")
tmtitotppr(FragPipepath,explabels)
tmtitotppr(dummyFragPipepath,dummyexplabels)
library(FragPipeToTPPR)
print(path.package("FragPipeToTPPR"))
print(path.package("FragPipeToTPPR"))
print(file.path(path.package("FragPipeToTPPR"), "dummyFragPipefolder"))
FragPipepath <- file.path(path.package("FragPipeToTPPR"), "dummyFragPipefolder")
explabels <- c("Vehicle, Treatment")
print(FragPipepath)
tmtitotppr(FragPipepath, explabels)
tmtitotppr(FragPipepath, explabels)
FragPipepath <- file.path(path.package("FragPipeToTPPR"), "dummyFragPipefolder/")
tmtitotppr(FragPipepath, explabels)
FragPipepath <- file.path(path.package("FragPipeToTPPR"), "dummyFragPipefolder/")
explabels <- c("Vehicle, Treatment")
print(FragPipepath)
tmtitotppr(FragPipepath, explabels)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
FragPipepath <- file.path(path.package("FragPipeToTPPR"), "dummyFragPipefolder")
explabels <- c("Vehicle, Treatment")
print(FragPipepath)
tmtitotppr(FragPipepath, explabels)
knit_with_parameters("~/FragPipeToTPPR/vignettes/Introduction.Rmd")
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
FragPipepath <- "dummyFragPipefolder/"
explabels <- c("Vehicle, Treatment")
print(FragPipepath)
tmtitotppr(FragPipepath, explabels)
FragPipeToTPPR::dummyFragPipepath
FragPipeToTPPR::dummyexplabels
FPpath<- FragPipeToTPPR::dummyFragPipepath
explables <- tmtitotppr(FragPipepath, explabels)
explables <- FragPipeToTPPR::dummyexplabels
fook <- tmtitotppr(FragPipepath, explabels)
fook <- tmtitotppr(FPpath, explabels)
fook <- tmtitotppr(FPpath, explabels)
explabels <- FragPipeToTPPR::dummyexplabels
fook <- tmtitotppr(FPpath, explabels)
library(FragPipeToTPPR)
FPpath<- FragPipeToTPPR::dummyFragPipepath
explabels <- FragPipeToTPPR::dummyexplabels
configpath <- tmtitotppr(FPpath, explabels)
tpprNormOneDTPP(FPpath,configpath)
print(configpath)
tpprNormOneDTPP(FPpath,configpath)
print(configpath)
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
load("~/FragPipeToTPPR/data/dummyconfigpath.rda")
dummyFragPipepath <- "dummyFragPipeFolder"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, overwrite = T)
library(FragPipeToTPPR)
FPpath<- FragPipeToTPPR::dummyFragPipepath
library(FragPipeToTPPR)
library(FragPipeToTPPR)
FPpath<- FragPipeToTPPR::dummyFragPipepath
explabels <- FragPipeToTPPR::dummyexplabels
configpath <- tmtitotppr(FPpath, explabels)
tpprNormOneDTPP(FPpath,configpath)
tpprNormOneDTPP(configpath,FPpath)
hoomandb <- FragPipeToTPPR::dummyhumandatabse
tpprTotpmap(configpath,hoomandb)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
![Picture caption]("dummyFragPipeFolder/TP-MAP_results.PNG")
dummytptmapresultspic <- "dummyFragPipeFolder/TP-MAP_results.PNG"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytptmapresultspic, overwrite = T)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
knitr::include_graphics("TP-MAP_results.PNG")
dummytpmappic <- "dummyFragPipeFolder/TP-MAP_results.PNG"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
TPPTR_result <- analyzeTPPTR(configpath,resultPath = FPpath, methods = "meltcurvefit",idVar= "Prot_ID",qualColName="qssm")
TPPTR_result <- TPP::analyzeTPPTR(configpath,resultPath = FPpath, methods = "meltcurvefit",idVar= "Prot_ID",qualColName="qssm")
TPPRfolder <- file.path(FPpath, "1DTPP-TPPR")
TPPTR_result <- TPP::analyzeTPPTR(configpath,resultPath = TPPRfolder , methods = "meltcurvefit",idVar= "Prot_ID",qualColName="qssm")
library(FragPipeToTPPR)
renv::snapshot()
library(FragPipeToTPPR)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
explabels <- FragPipeToTPPR::dummyexplabels
FPpath<- FragPipeToTPPR::dummyFragPipepath
fook <- tmtitotppr(FragPipepath, explabels)
fook <- tmtitotppr(FPpath, explabels)
dummyFragPipepath <- "extdata/dummyFragPipeFolder"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
FPpath<- FragPipeToTPPR::dummyFragPipepath
dummyFragPipepath <- "extdata/dummyFragPipeFolder"
dummyFragPipepath
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
library(FragPipeToTPPR)
explabels <- FragPipeToTPPR::dummyexplabels
FPpath<- FragPipeToTPPR::dummyFragPipepath
fook <- tmtitotppr(FPpath, explabels)
setwd("~/FragPipeToTPPR")
fook <- tmtitotppr(FPpath, explabels)
FPpath<- insta/extdata/dummyFragPipeFolder
FPpath<- "insta/extdata/dummyFragPipeFolder"
fook <- tmtitotppr(FPpath, explabels)
FPpath<- inst/extdata/dummyFragPipeFolder
FPpath<- "inst/extdata/dummyFragPipeFolder"
fook <- tmtitotppr(FPpath, explabels)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
renv::status()
renv::status()
?renv::status()
renv::restore()
library(FragPipeToTPPR)
fook <- tmtitotppr(FPpath, explabels)
library(FragPipeToTPPR)
configpath <- tmtitotppr(FPpath, explabels)
print(configpath)
5. We will now perform a general normalization procedure for all melting curves (add link to function in TPP-R and link to original paper) This function takes the normalization function from TPP-R and outputs the data ready for conversion into TP-MAP input file. Notice the new .csv files inside the 1DTPP-TPPR folder?
tpprNormOneDTPP(configpath,FPpath)
unlink("vignettes/Introduction_cache", recursive = TRUE)
load("~/FragPipeToTPPR/data/dummyFragPipepath.rda")
load("~/FragPipeToTPPR/data/dummyconfigpath.rda")
dummyFragPipepath <- "extdata/dummyFragPipeFolder"
dummyhumandatabse <- "extdata/dummyFragPipeFolder/2023-07-12-UP000005640_dummy.fas"
dummyexplabels <- c("Treatment", "Vehicle")
dummyconfigpath <- "extdata/dummyFragPipeFolder/1DTPP-TPPR/TPP-TR_config.csv"
dummytpmappic <- "extdata/dummyFragPipeFolder/TP-MAP_results.PNG"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
library(FragPipeToTPPR)
browseVignettes("FragPipeToTPPR")
devtools::build_rmd("vignettes/Introduction.Rmd")
browseVignettes("FragPipeToTPPR")
library(FragPipeToTPPR)
library(FragPipeToTPPR)
dummytpmappic <- "extdata/dummyFragPipeFolder/TP-MAPresults.PNG"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
dummyFragPipepath <- "inst/extdata/dummyFragPipeFolder"
dummyhumandatabse <- "inst/extdata/dummyFragPipeFolder/2023-07-12-UP000005640_dummy.fas"
dummyexplabels <- c("Treatment", "Vehicle")
dummyconfigpath <- "inst/extdata/dummyFragPipeFolder/1DTPP-TPPR/TPP-TR_config.csv"
dummytpmappic <- "inst/extdata/dummyFragPipeFolder/TP-MAPresults.PNG"
# This should be the last line.
# Note that names are unquoted.
# Using overwrite = T so every time the script runs the
# updated objects are saved, but the default is overwrite = F
usethis::use_data(dummyFragPipepath, dummyhumandatabse, dummyexplabels, dummyconfigpath, dummytpmappic, overwrite = T)
library(FragPipeToTPPR, TPP)
setwd(system.file(package = "FragPipeToTPPR"))
setwd(system.file(package = "FragPipeToTPPR"))
knitr::include_graphics(FragPipeToTPPR::dummytpmappic)
devtools::build_rmd("vignettes/Introduction.Rmd")
library(FragPipeToTPPR)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
$stdout
.Last.error
devtools::build_rmd()
getwd()
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::build_rmd("vignettes/Introduction.Rmd")
renc:status()
renv:status()
library(devtools)
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::load_all(".")
library(FragPipeToTPPR)
library(renv)
renv::status()
renv::snapshot()
library(devtools)
devtools::build_rmd("vignettes/Introduction.Rmd")
library(TPP)
renv::restore()
devtools::build_rmd("vignettes/Introduction.Rmd")
`$stdout`
library(devtools)
devtools::build_rmd("vignettes/Introduction.Rmd")
library(FragPipeToTPPR, TPP)
print(getwd())
FPpath<- FragPipeToTPPR::dummyFragPipepath
print(FPpath)
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::build_rmd("vignettes/Introduction.Rmd")
devtools::build_vignettes()
browseVignettes("FragPipeToTPPR")
library(FragPipeToTPPR)
browseVignettes("FragPipeToTPPR")
devtools::load_all(".")
browseVignettes("FragPipeToTPPR")
browseVignettes("FragPipeToTPPR")
renv::snapshot()
renv::snapshot()
renv::init()
setwd("C:/Users/crojaram/Documents")
devtools::build_vignettes()
library(FragPipeToTPPR)
fragpipe <- "Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/FR_21-1"
lables <- c("Vehicle", "Treatment")
> configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
devtools::load_all(".")
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
devtools::load_all(".")
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
library(FragPipeToTPPR)
configpath <- FragPipeToTPPR::tmtitotppr(fragpipe,lables)
#~~~~~~~~~~~~~~~~~~~~~~Main~~~~~~~~~~~~~~~~~~"
explabels <- c("Treatment", "Vehicle")
#I. Format conversion
#fragpipefolder <-"Z:/crojaram/PRFacility_TPP/Output/MS2-varTMT"
fragpipefolder <- "Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/FR_21-1"
#~~~~~~~~~~~~~~~~~~~~~~Main~~~~~~~~~~~~~~~~~~"
explabels <- c("Treatment", "Vehicle")
#~~~~~~~~~~~~~~~~~~~~~~Main~~~~~~~~~~~~~~~~~~"
explabels <- c("Vehicle", "Treatment" )
#I. Format conversion
#fragpipefolder <-"Z:/crojaram/PRFacility_TPP/Output/MS2-varTMT"
fragpipefolder <- "Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/FR_21-1"
configfile <- tmtiTotppr(fragpipefolder, explabels)
tmtiheader_to_tpprheaders <- function(directory_of_interest) {
annotationfile <- ""
files_in_specific_directory <- list.files(directory_of_interest)
for (file in files_in_specific_directory){
if (grepl("annotation.txt", file)) {
annotationfile <-  file.path(directory_of_interest, file)
}
}
# Initiate a list to rename column headers
output_renaming_dict <- list('Index' = 'Prot_ID', "NumberPSM" = "qssm")
# Dictionary to translate TMT labels to TPP-R labels
tppr_labels_dict <- list(
"126" = "rel_fc_126", "127N" = "rel_fc_127L", "127C" = "rel_fc_127H",
"128N" = "rel_fc_128L", "128C" = "rel_fc_128H", "129N" = "rel_fc_129L",
"129C" = "rel_fc_129H", "130N" = "rel_fc_130L", "130C" = "rel_fc_130H",
"131N" = "rel_fc_131L"
)
temp_vals_for_tppr <- list()
# Read annotation file
lines <- readLines(annotationfile)
for (line in lines) {
line <- gsub("\n", "", line)
splits <- strsplit(line, "\t")[[1]]
# Obtain TMT label and experimental label (temperature_exptype-rep)
tmt_label <- splits[1]
exp_label <- splits[2]
# Add the experimental label as key and tmt label as value
output_renaming_dict[[exp_label]] <- tppr_labels_dict[[tmt_label]]
# Change formatting to match the one needed by TPP-R config file
config_tmt_label <- gsub("rel_fc_", "", tppr_labels_dict[[tmt_label]])
exp_label_spl <- unlist(strsplit(exp_label, "_"))
config_temp_label <- exp_label_spl[1]
temp_vals_for_tppr[[config_tmt_label]] <- as.numeric(config_temp_label)
}
return(list(output_renaming_dict, temp_vals_for_tppr))
}
#main function to convert files
tmtiTotppr <- function(outputfolder, experimentlables){
#TODO: Use R lists (like Python dictionaries) to extract the data needed to create the config file (already existing code in Python)
#Variables to find the correct TMTI .tsv file
tmtifile <- "/tmt-report/ratio_protein_None.tsv"
inputfile <-  paste0(outputfolder, tmtifile)
# Open TSV file
#tmtidata <- read.table(tmtifile, header = TRUE, sep = "\t")
tmtidata <- read.delim(inputfile)
#Extract column names
headers <- colnames(tmtidata)
#print(headers)
# List all folders in the specified directory
folders <- list.dirs(fragpipefolder, recursive = FALSE)
#vectors to store congif file columns
Experiment <- c()
Condition <- c()
Replicate <- c()
TMTsix <- c()
TMTsevenL <- c()
TMTsevenH <- c()
TMTeightL <- c()
TMTeightH <- c()
TMTnineL <- c()
TMTnineH <- c()
TMTtenL <- c()
TMTtenH <- c()
TMTelevenL <- c()
pathcol <- c()
#list to create comparison columns
comparison <- list()
#Find the experimental names
for (folder in folders) {
foundexplabel <- ""
# Select experiment folders to extract the number for replicates and
#look for those labels among the columns of the tsv file
for (label in experimentlables) {
lscolumnstoget <- list("Index", "NumberPSM")
if (grepl(label, folder)) {
combined_string <- paste("Folder: ", folder)
#print(combined_string)
# Splitting the file path using strsplit
path_components <- unlist(strsplit(folder, "/"))
#print(path_components[length(path_components)])
#Obtain exp label
foundexplabel <- path_components[length(path_components)]
Experiment <- append(Experiment, foundexplabel)
#remove replicate to set condition
conditionlabel <- unlist(strsplit(foundexplabel, "_"))
Condition <- append(Condition, conditionlabel[1])
Replicate <- append(Replicate, conditionlabel[2])
#Slice data frame according to the experiment and replicate
for (item in headers) {
if (grepl(foundexplabel, item)){
#print(item)
# Remove the first 'X' character from the string, which was added when using read.delim()
lscolumnstoget[[length(lscolumnstoget) + 1]] <- item
}
}
# Selecting columns by name
newdataframe <- tmtidata[, unlist(lscolumnstoget)]
print(class(newdataframe))
#print(newdataframe$"Index")
#Normalization to lowest temperature (first two columns are protein id and qssm filtering criteria)
newdataframe[, c(3,ncol(newdataframe))] <-  newdataframe[, c(3,ncol(newdataframe))] / newdataframe[,3]
#print(newdataframe[, -1])
#TODO: Use annotation file to replace the temperature_experiment with appropritate TMT -lables
tpprheaders <- tmtiheader_to_tpprheaders(folder)
print(tpprheaders)
#Extract the TMT-label to Celcius conversion
configtempvals <- tpprheaders[2][[1]]
TMTsix <- append(TMTsix, configtempvals$`126` )
TMTsevenL <- append(TMTsevenL, configtempvals$`127L` )
TMTsevenH <- append(TMTsevenH, configtempvals$`127H` )
TMTeightL <- append(TMTeightL, configtempvals$`128L` )
TMTeightH <- append(TMTeightH, configtempvals$`128H` )
TMTnineL <- append(TMTnineL, configtempvals$`129L` )
TMTnineH <- append(TMTnineH, configtempvals$`129H` )
TMTtenL <- append(TMTtenL, configtempvals$`130L` )
TMTtenH <- append(TMTtenH, configtempvals$`130H` )
TMTelevenL <- append(TMTelevenL, configtempvals$`131L` )
#Place correct headers
names(newdataframe) <- unlist(tpprheaders[1])
#print(newdataframe$"Prot_ID")
#print("Summary of the output dataframe")
#print(summary(newdataframe))
#TODO: Create config file
outputfilename <- paste(foundexplabel, "txt", sep = ".")
#Create TPP-TPPR folder if it does not exist already
tpprfolder <- file.path(outputfolder, "1DTPP-TPPR")
if (dir.exists(tpprfolder)) {
print("Saving results in 1DTPP-TPPR folder")
} else {
print("Creating 1DTPP-TPPR folder")
dir.create(tpprfolder)
}
#Create new path
# print(newdataframe)
Outputname <- file.path(tpprfolder, outputfilename)
pathcol <- append(pathcol, Outputname )
#print(Outputname)
# Save data frame as a tab-delimited text file
#write.table(newdataframe, file = Outputname, sep = "\t", row.names = FALSE, quote = FALSE) - use base R (slower)
fwrite(newdataframe, file = Outputname, sep = "\t")
}
}
}
configurationdf <- data.frame(Experiment, Condition, Replicate,  TMTsix, TMTsevenL, TMTsevenH, TMTeightL, TMTeightH, TMTnineL, TMTnineH, TMTtenL, TMTtenH, TMTelevenL, pathcol)
names(configurationdf) <- c("Experiment", "Condition", "Replicate", "126","127L", "127H", "128L","128H",	"129L", "129H",	"130L",	"130H",	"131L", "Path")
configsavepath <- file.path(outputfolder, "1DTPP-TPPR", "TPP-TR_config.csv")
write.csv(configurationdf, configsavepath, row.names = FALSE)
return(configsavepath)
}
configfile <- tmtiTotppr(fragpipefolder, explabels)
library(data.table)
configfile <- tmtiTotppr(fragpipefolder, explabels)
#Script to create a function to convert TMTI to TPPR input
#Author: Carolina Rojas Ramirez
# Nov 14th, 2023
#NOTES: make sure there are not two annotation folder per experimental folder
#Install pacakge
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TPP")
library(FragPipeToTPPR)
explabels <- c("Treatment", "Vehicle")
fragpipefolder <- "Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/Nov_2023_Phi"
configfile <- tmtiTotppr(fragpipefolder, explabels)
configfile <- FragPipeToTPPR::tmtiTotppr(fragpipefolder, explabels)
configfile <- FragPipeToTPPR::tmtitotppr(fragpipefolder, explabels)
Newfragpipe <- “Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/FR_21-1”
Newfragpipe <- "Z:/crojaram/TPP_Project/PXD012423/1DTPP/TableS1-2mgATP/FR_21-1"
newconfigfile <- FragPipeToTPPR::tmtitotppr(Newfragpipe, explabels)
library(FragPipeToTPPR)
